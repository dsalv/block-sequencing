// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.6;

import "forge-std/console.sol";
import "ds-test/test.sol";

// Cheatcodes
interface Vm {
    struct Log {
        bytes32[] topics;
        bytes data;
    }

    function createFork(string memory, uint256) external returns (uint256);

    function selectFork(uint256) external;

    function transact(bytes32) external;

    function recordLogs() external;

    function getRecordedLogs() external view returns (Log[] memory);
}

// ERC20 interface for the shitcoin
interface TokenInterface {
    function balanceOf(address) external view returns (uint256);
}

contract ForkSimulate is DSTest {
    Vm vm = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function testTransact() public {

        // Enter forking mode at block: https://etherscan.io/block/{block_number}
        uint256 fork = vm.createFork("https://rpc.notadegen.com/eth", <block_number>);
        
        vm.selectFork(fork);

        // a random transfer transaction in the block: https://etherscan.io/tx/0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89
        bytes32[<tx_length>] memory tx_array = <swap_tx_array>;
        // traders
        address[<tx_length>] memory senders = <swap_senders>;
        // reouters
        address[<tx_length>] memory recipients = <swap_recipients>;

        // tokens sold
        address[<tx_length>] memory tokens_sold = <swap_tokens_sold>;
        // tokens bought
        address[<tx_length>] memory tokens_bought = <swap_tokens_bought>;

        for (uint i = 0; i < tx_array.length; i++) {
            address sender = senders[i];
            address recipient = recipients[i];

            // token bought
            TokenInterface token_bought = TokenInterface(tokens_bought[i]);
            // token sold
            TokenInterface token_sold = TokenInterface(tokens_sold[i]);


            console.log("txn_hash: ");
            console.logBytes32(tx_array[i]);
            console.log("eth_balance_before: ", sender.balance);
            console.log("token_sold_balance_before: ", token_sold.balanceOf(sender));
            uint256 shitcoinBalance = token_sold.balanceOf(sender);
            console.log("token_bought_balance_before: ", token_bought.balanceOf(sender));

            //execute the transaction
            vm.transact(tx_array[i]);
        
            console.log("eth_balance_after: ", sender.balance);
            console.log("token_sold_balance_after: ", token_sold.balanceOf(sender));
            uint256 newShitcoinBalance = token_bought.balanceOf(sender);
            console.log("token_bought_balance_after: ", newShitcoinBalance);
        }
    }
}
